{"version":3,"sources":["components/Todo_form.js","components/Todo.js","components/Todo_list.js","App.js","reportWebVitals.js","index.js"],"names":["Todo_form","props","useState","edit","value","input","setInput","inputRef","useRef","useEffect","current","focus","handleChange","e","target","className","onSubmit","preventDefault","id","Math","floor","random","text","type","placeholder","name","onChange","ref","Todo","todos","completeTodo","removeTodo","updateTodo","setEdit","map","todo","index","isComplete","onClick","Todo_list","setTodos","test","newTodos","console","log","updatedTodos","removeArr","filter","todoId","newValue","prev","item","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7c0064be.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\n\r\nfunction Todo_form(props) {\r\n  const [input, setInput] = useState(props.edit ? props.edit.value : '');\r\n  const inputRef = useRef(null)\r\n  useEffect(() => {\r\n    inputRef.current.focus()\r\n  })\r\n  const handleChange = (e) => {\r\n    setInput(e.target.value);\r\n  };\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    props.onSubmit({\r\n      id: Math.floor(Math.random() * 10000),\r\n      text: input,\r\n    });\r\n    setInput(\"\");\r\n  };\r\n\r\n  return (\r\n    <form className=\"todo-form\" onSubmit={handleSubmit}>\r\n      {props.edit ? (\r\n        <>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Add a Todo\"\r\n            value={input}\r\n            name=\"text\"\r\n            className=\"todo-input edit\"\r\n            onChange={handleChange}\r\n            ref={inputRef}\r\n          />\r\n          <button className=\"todo-button edit\">update todo</button>\r\n        </>\r\n      ) : (\r\n        <>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Add a Todo\"\r\n            value={input}\r\n            name=\"text\"\r\n            className=\"todo-input\"\r\n            onChange={handleChange}\r\n            ref={inputRef}\r\n          />\r\n          <button className=\"todo-button\">Add todo</button>\r\n        </>\r\n      )}\r\n    </form>\r\n  );\r\n\r\n}\r\n\r\nexport default Todo_form;\r\n","import React, { useState } from \"react\";\r\nimport Todo_form from \"./Todo_form\";\r\nimport { RiCloseCircleLine } from 'react-icons/ri'\r\nimport { TiEdit } from 'react-icons/ti'\r\n\r\nfunction Todo({ todos, completeTodo, removeTodo, updateTodo }) {\r\n    const [edit, setEdit] = useState({\r\n        id: null,\r\n        value: '',\r\n    });\r\n\r\n    const submitUpdate = value => {\r\n        updateTodo(edit.id, value)\r\n        setEdit({\r\n            id: null,\r\n            value: ''\r\n        })\r\n    }\r\n\r\n    if (edit.id) {\r\n        return <Todo_form edit={edit} onSubmit={submitUpdate} />\r\n    }\r\n\r\n    return todos.map((todo, index) => (\r\n        <div\r\n            className={todo.isComplete ? \"todo-row complete\" : \"todo-row\"}\r\n            key={index}\r\n        >\r\n            <div key={todo.id} onClick={() => completeTodo(todo.id)}>\r\n                {todo.text}\r\n            </div>\r\n            <div className=\"icons\">\r\n                <RiCloseCircleLine\r\n                    onClick={() => removeTodo(todo.id)}\r\n                    className='delete-icon' />\r\n                <TiEdit onClick={() => setEdit({ id: todo.id, value: todo.text })}\r\n                    className='edit-icon' />\r\n            </div>\r\n        </div>\r\n    ));\r\n}\r\n\r\nexport default Todo;\r\n","import React, { useState } from \"react\";\r\nimport Todo from \"./Todo\";\r\nimport Todo_form from \"./Todo_form\";\r\n\r\n// todo list function\r\nfunction Todo_list() {\r\n  const [todos, setTodos] = useState([]);\r\n  const addTodo = (todo) => {\r\n    if (!todo.text || /^\\s*$/.test(todo.text)) {\r\n      return;\r\n    }\r\n    const newTodos = [todo, ...todos];\r\n    setTodos(newTodos);\r\n    console.log(...todos);\r\n  };\r\n\r\n// update todo function\r\n  const updateTodo = (todoId, newValue) => {\r\n    if (!newValue.text || /^\\s*$/.test(newValue.text)) {\r\n      return;\r\n    }\r\n    setTodos((prev) =>\r\n      prev.map((item) => (item.id === todoId ? newValue : item))\r\n    );\r\n  };\r\n\r\n// remove todo function \r\n  const removeTodo = (id) => {\r\n    const removeArr = [...todos].filter((todo) => todo.id !== id);\r\n    setTodos(removeArr);\r\n  };\r\n\r\n// complete todo function\r\n  const completeTodo = (id) => {\r\n    let updatedTodos = todos.map((todo) => {\r\n      if (todo.id === id) {\r\n        todo.isComplete = !todo.isComplete;\r\n      }\r\n      return todo;\r\n    });\r\n    setTodos(updatedTodos);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h1>What's the plan for today</h1>\r\n      <Todo_form onSubmit={addTodo} />\r\n      <Todo\r\n        todos={todos}\r\n        completeTodo={completeTodo}\r\n        removeTodo={removeTodo}\r\n        updateTodo={updateTodo}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Todo_list;\r\n","import \"./App.css\";\nimport Todo_list from \"./components/Todo_list\";\n// bootstrap is framework to design css quickly \nfunction App() {\n  return (\n    // what is this className: jsx - javascript syntax extension\n    /* jsx is used to insert dynamic javascript in the react components */\n    <div className=\"todo-app\">\n        <Todo_list/> \n    </div>\n  );\n}\n\nexport default App;\n","/* Create React App includes a built-in tool for measuring the real life \nperformance of your app. It is called reportWebVitals and it measures a \nset of metrics that aim to capture the user experience of a web page */\n\nconst reportWebVitals = (onPerfEntry) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import (\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;","// it is your entry point of your application\n// index. js is where you would usually mount/render \n// your main react component onto your “root” element(which you mark in your html\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}